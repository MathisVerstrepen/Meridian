"""create parent_node_id column

Revision ID: 794c66868cfa
Revises:
Create Date: 2025-09-08 16:53:23.887020

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "794c66868cfa"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(length=255), nullable=False),
        sa.Column("password", sa.TEXT(), nullable=True),
        sa.Column("email", sa.TEXT(), nullable=True),
        sa.Column("avatar_url", sa.TEXT(), nullable=True),
        sa.Column("oauth_provider", sa.TEXT(), nullable=True),
        sa.Column("oauth_id", sa.TEXT(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=False)
    op.create_table(
        "files",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("parent_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("type", sa.String(length=50), nullable=False),
        sa.Column("file_path", sa.String(length=1024), nullable=True),
        sa.Column("size", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("content_type", sa.TEXT(), nullable=True),
        sa.Column("storage_provider", sa.String(length=50), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["parent_id"], ["files.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_files_user_parent", "files", ["user_id", "parent_id"], unique=False)
    op.create_table(
        "graphs",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("custom_instructions", sa.TEXT(), nullable=True),
        sa.Column("max_tokens", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("temperature", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("top_p", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("top_k", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("frequency_penalty", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("presence_penalty", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("repetition_penalty", sa.DOUBLE_PRECISION(), nullable=True),
        sa.Column("reasoning_effort", sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_graphs_user_updated_at", "graphs", ["user_id", "updated_at"], unique=False)
    op.create_index(op.f("ix_graphs_name"), "graphs", ["name"], unique=False)
    op.create_table(
        "provider_tokens",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("provider", sa.String(length=50), nullable=False),
        sa.Column("access_token", sa.TEXT(), nullable=False),
        sa.Column("refresh_token", sa.TEXT(), nullable=True),
        sa.Column("scopes", sa.TEXT(), nullable=True),
        sa.Column("expires_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_provider_tokens_user_provider", "provider_tokens", ["user_id", "provider"], unique=True
    )
    op.create_index(
        op.f("ix_provider_tokens_user_id"), "provider_tokens", ["user_id"], unique=False
    )
    op.create_index(
        op.f("ix_provider_tokens_provider"), "provider_tokens", ["provider"], unique=False
    )
    op.create_table(
        "refresh_tokens",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("token", sa.String(length=255), nullable=False),
        sa.Column("expires_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "repositories",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("provider", sa.String(length=50), nullable=False),
        sa.Column("repo_name", sa.String(length=255), nullable=False),
        sa.Column("clone_url", sa.TEXT(), nullable=False),
        sa.Column("local_path_uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("error_message", sa.TEXT(), nullable=True),
        sa.Column("last_pulled_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("is_global", sa.Boolean(), nullable=False),
        sa.Column("filter_config", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_repositories_user_repo_provider",
        "repositories",
        ["user_id", "repo_name", "provider"],
        unique=True,
    )
    op.create_index(op.f("ix_repositories_user_id"), "repositories", ["user_id"], unique=False)
    op.create_index(
        op.f("ix_repositories_local_path_uuid"), "repositories", ["local_path_uuid"], unique=True
    )
    op.create_table(
        "settings",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "settings_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_settings_user_id"), "settings", ["user_id"], unique=True)
    op.create_table(
        "used_refresh_tokens",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("expires_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_used_refresh_tokens_token"), "used_refresh_tokens", ["token"], unique=True
    )
    op.create_table(
        "nodes",
        sa.Column("id", sa.String(length=255), nullable=False),
        sa.Column("graph_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type", sa.String(length=100), nullable=False),
        sa.Column("position_x", sa.DOUBLE_PRECISION(), nullable=False),
        sa.Column("position_y", sa.DOUBLE_PRECISION(), nullable=False),
        sa.Column("width", sa.String(length=255), nullable=True),
        sa.Column("height", sa.String(length=255), nullable=True),
        sa.Column("parent_node_id", sa.String(length=255), nullable=True),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(["graph_id"], ["graphs.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("graph_id", "id"),
    )
    op.create_index(op.f("ix_nodes_type"), "nodes", ["type"], unique=False)
    op.create_index("idx_nodes_graph_id", "nodes", ["graph_id"], unique=False)
    op.create_table(
        "edges",
        sa.Column("id", sa.String(length=255), nullable=False),
        sa.Column("graph_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("source_node_id", sa.String(length=255), nullable=False),
        sa.Column("target_node_id", sa.String(length=255), nullable=False),
        sa.Column("source_handle_id", sa.String(length=255), nullable=True),
        sa.Column("target_handle_id", sa.String(length=255), nullable=True),
        sa.Column("type", sa.String(length=100), nullable=True),
        sa.Column("label", sa.String(length=255), nullable=True),
        sa.Column("animated", sa.Boolean(), nullable=True),
        sa.Column("style", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("markerEnd", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["graph_id"],
            ["graphs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["graph_id", "source_node_id"], ["nodes.graph_id", "nodes.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["graph_id", "target_node_id"], ["nodes.graph_id", "nodes.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("graph_id", "id"),
    )
    op.create_index("idx_edges_target_node", "edges", ["graph_id", "target_node_id"], unique=False)
    op.create_index("idx_edges_source_node", "edges", ["graph_id", "source_node_id"], unique=False)
    op.create_index("idx_edges_graph_id", "edges", ["graph_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_edges_graph_id", table_name="edges")
    op.drop_index("idx_edges_source_node", table_name="edges")
    op.drop_index("idx_edges_target_node", table_name="edges")
    op.drop_table("edges")
    op.drop_index("idx_nodes_graph_id", table_name="nodes")
    op.drop_index(op.f("ix_nodes_type"), table_name="nodes")
    op.drop_table("nodes")
    op.drop_index(op.f("ix_used_refresh_tokens_token"), table_name="used_refresh_tokens")
    op.drop_table("used_refresh_tokens")
    op.drop_index(op.f("ix_settings_user_id"), table_name="settings")
    op.drop_table("settings")
    op.drop_index(op.f("ix_repositories_local_path_uuid"), table_name="repositories")
    op.drop_index(op.f("ix_repositories_user_id"), table_name="repositories")
    op.drop_index("idx_repositories_user_repo_provider", table_name="repositories")
    op.drop_table("repositories")
    op.drop_table("refresh_tokens")
    op.drop_index(op.f("ix_provider_tokens_provider"), table_name="provider_tokens")
    op.drop_index(op.f("ix_provider_tokens_user_id"), table_name="provider_tokens")
    op.drop_index("idx_provider_tokens_user_provider", table_name="provider_tokens")
    op.drop_table("provider_tokens")
    op.drop_index(op.f("ix_graphs_name"), table_name="graphs")
    op.drop_index("idx_graphs_user_updated_at", table_name="graphs")
    op.drop_table("graphs")
    op.drop_index("idx_files_user_parent", table_name="files")
    op.drop_table("files")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
